// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	util "programs/pkgs/util"

	mock "github.com/stretchr/testify/mock"
)

// Util is an autogenerated mock type for the Util type
type Util struct {
	mock.Mock
}

// BuildResponse provides a mock function with given fields: code, body, message
func (_m *Util) BuildResponse(code int, body interface{}, message string) util.BaseResponse {
	ret := _m.Called(code, body, message)

	var r0 util.BaseResponse
	if rf, ok := ret.Get(0).(func(int, interface{}, string) util.BaseResponse); ok {
		r0 = rf(code, body, message)
	} else {
		r0 = ret.Get(0).(util.BaseResponse)
	}

	return r0
}

// ExecuteRequest provides a mock function with given fields: request, result, url
func (_m *Util) ExecuteRequest(request []byte, result interface{}, url string) error {
	ret := _m.Called(request, result, url)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, interface{}, string) error); ok {
		r0 = rf(request, result, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateRandomIdentifier provides a mock function with given fields:
func (_m *Util) GenerateRandomIdentifier() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RandomString provides a mock function with given fields: l
func (_m *Util) RandomString(l uint) string {
	ret := _m.Called(l)

	var r0 string
	if rf, ok := ret.Get(0).(func(uint) string); ok {
		r0 = rf(l)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
